How did viewing a diff between two versions of a file help you see the bug that
was introduced?

The diff command displayed the relative changes made between the two files.
It was very easy to pin point the error since the difference was a lot less
content than the entire code.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

Making coding more DRY. also easier debugging.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?

Might forget to do the commits. might feel lazy to commit?. Automatic commits,
can become too large to traverse through to get some meaningful info.
Unless intelligent intervention is in place.

git log --stat
git diff file1 file2


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Because git handles version control for coding. Which can multiple files working
very much interconnected. Therefore it is important to have multiple files in one
commit.


How can you use the commands git log and git diff to view the history of files?

You can use git log to see all the previous commits, along with the short message.
And for any particular commit you could use the previous version to compare it
with using the git diff command.


git checkout //back to a previous commit
//Detached head state


How might using version control make you more confident to make changes that
could break something?

You can always checkout to a previous version.


Now that you have your workspace set up, what do you want to try using Git for?

For the current project i am working on..

#################################################
git init
git clone
git commit
git log
git checkout
git diff -u

git status
