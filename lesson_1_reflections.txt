ASK : How did viewing a diff between two versions of a file help you see the bug that
was introduced?

SAY : The diff command displayed the relative changes made between the two files.
It was very easy to pin point the error since the difference was a lot less
content than the entire code.


ASK : How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

SAY : Making coding more DRY. also easier debugging.

ASK : What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
Docs does?

SAY : Might forget to do the commits. might feel lazy to commit?. Automatic commits,
can become too large to traverse through to get some meaningful info.
Unless intelligent intervention is in place.

ASK : Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

SAY : Because git handles version control for coding. Which can multiple files working
very much interconnected. Therefore it is important to have multiple files in one
commit.


ASK : How can you use the commands git log and git diff to view the history of files?

SAY : You can use git log to see all the previous commits, along with the short message.
And for any particular commit you could use the previous version to compare it
with using the git diff command.


ASK : How might using version control make you more confident to make changes that
could break something?

SAY : You can always checkout to a previous version.


ASK : Now that you have your workspace set up, what do you want to try using Git for?

SAY : For the current project i am working on..

#################################################
git init
git clone
git commit
git log
git checkout
git diff -u

git add
git status
git commit

git diff between staging area and working directory...!!!
git diff --staged

git reset --hard

git branch //shows all the branches
git branch branch_name //creates new branch
git checkout branch_name //switch between branches.

git log --graph --oneline master branch_name

git checkout -b new_branch_name // create new branch checkout to it

git merge master branch_name

git show // diff between given commit and its parent

git branch -d branch_name // Delete branch once merges. -d stands for delete.


--------------------------------------------------
git checkout //back to a previous commit
//Detached head state
--------------------------------------------------
git diff -> working directory & staging area
git diff --staged -> staging area & commit (latest)
git diff commit1 commit2 -> commit1 & commit2
##################################################

The Type
The type is contained within the title and can be one of these types:

feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change

###################################################


ASK : What happens when you initialize a repository? Why do you need to do it?

SAY : This will create a .git directory, where the commit files or previous versions
will be stored.

ASK : How is the staging area different from the working directory and the repository?
What value do you think it offers?

SAY : Staging area is a place where you can mould your commits. before actually creating
them. This allows the opportunity to maybe select multiple files and so on.

ASK : How can you use the staging area to make sure you have one commit per logical
change?

SAY : Use git diff to see the difference between working directory and staging area.

ASK : What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

SAY : When trying out new feautres, especially features that are not sequentially
an improvement but may be on different variant. master branch will be the production
quality branch that wont break.

ASK : How do the diagrams help you visualize the branch structure?

SAY : The diagram shows the parent or previous commits.

ASK : What is the result of merging two branches together? Why do we represent
it in the diagram the way we do?

SAY : Merging two branches will create a new commit where the updates from each
branch are checked to its priors and either been chosen to add or remove.
Because the merged commit will have two parents and thus two histories.

ASK : What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?

SAY : Automatic merges saves a lot of time, and since it is only done when
there are no conflicts means the program should run fine.
